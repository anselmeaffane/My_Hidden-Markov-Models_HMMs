import pandas as pd
import numpy as np


import matplotlib
from matplotlib import pyplot as plt


def forward(V, A, B, pi):
    alpha = np.zeros((V.shape[0], A.shape[0]))
    alpha[0, :] = pi * B[:, V[0]]

    for t in range(1, V.shape[0]):
        for j in range(A.shape[0]):

            alpha[t, j] = alpha[t - 1].dot(A[:, j]) * B[j, V[t]]

    return alpha


def backward(V, A, B):
    beta = np.zeros((V.shape[0], A.shape[0]))

    # setting beta(T) = 1
    beta[V.shape[0] - 1] = np.ones((A.shape[0]))

    # Loop in backward way from T-1 to
    # Due to python indexing the actual loop will be T-2 to 0
    for t in range(V.shape[0] - 2, -1, -1):
        for j in range(A.shape[0]):
            beta[t, j] = (beta[t + 1] * B[:, V[t + 1]]).dot(A[j, :])

    return beta


def baum_welch(V, A, B, pi, n_iter=100):
    global gamma, denominator, xi
    M = A.shape[0]
    T = len(V)

    for n in range(n_iter):
        alpha = forward(V, A, B, pi)
        beta = backward(V, A, B)

        xi = np.zeros((M, M, T - 1))
        for t in range(T - 1):
            denominator = np.dot(np.dot(alpha[t, :].T, A) * B[:, V[t + 1]].T, beta[t + 1, :])
            for i in range(M):
                numerator = alpha[t, i] * A[i, :] * B[:, V[t + 1]].T * beta[t + 1, :].T
                xi[i, :, t] = numerator / denominator

        gamma = np.sum(xi, axis=1)
        A = np.sum(xi, 2) / np.sum(gamma, axis=1).reshape((-1, 1))

        # Add additional T'th element in gamma
        gamma = np.hstack((gamma, np.sum(xi[:, :, T - 2], axis=0).reshape((-1, 1))))

        K = B.shape[1]
        denominator = np.sum(gamma, axis=1)
        for l in range(K):
            B[:, l] = np.sum(gamma[:, V == l], axis=1)

        B = np.divide(B, denominator.reshape((-1, 1)))

    return {"A_hat":A, "B_hat":B, "Pi_hat": denominator}

#states = PATH1, PATH2, PATH3, PATH4 = 0, 1, 2, 3

V = np.array([3, 3, 2, 1, 2, 2, 1, 2, 3, 0])

# Transition Probabilities
A = np.array(((0.3, 0.2, 0.2, 0.3), (0.2, 0.3, 0.2, 0.3), (0.2, 0.2, 0.3, 0.3), (0.2, 0.2, 0.2, 0.4)))
A = A / np.sum(A)

# Emission Probabilities
B = np.array(((0.3, 0.3, 0.3, 0.1), (0.3, 0.3, 0.3, 0.1), (0.3, 0.3, 0.3, 0.1), (0.1, 0.1, 0.1, 0.7)))
B = B / np.sum(B).reshape((-1, 1))

# Equal Probabilities for the initial distribution
pi = np.array((0.2, 0.2, 0.2, 0.4))


print(baum_welch(V, A, B, pi, n_iter=1000))

################## OUTPUT ####################
	## AFTER N°1 ITERATION ##
{'A_hat': array([[0.33137496, 0.22091664, 0.22091664, 0.22679177],
        [0.22091664, 0.33137496, 0.22091664, 0.22679177],
        [0.22091664, 0.22091664, 0.33137496, 0.22679177],
        [0.20838237, 0.20838237, 0.20838237, 0.37485288]]),
 'B_hat': array([[0.12546498, 0.26411403, 0.51887847, 0.09154252],
        [0.12546498, 0.26411403, 0.51887847, 0.09154252],
        [0.12546498, 0.26411403, 0.51887847, 0.09154252],
        [0.04975425, 0.07349461, 0.1654372 , 0.71131393]]),
 'Pi_hat': array([0.05029605, 0.05029605, 0.05029605, 0.84911184])}

	## AFTER N°10 ITERATION
{'A_hat': array([[0.41893911, 0.27929274, 0.27929274, 0.02247542],
        [0.27929274, 0.41893911, 0.27929274, 0.02247542],
        [0.27929274, 0.27929274, 0.41893911, 0.02247542],
        [0.20019314, 0.20019314, 0.20019314, 0.39942057]]),
 'B_hat': array([[1.16940654e-01, 2.42212154e-01, 4.84075563e-01, 1.56771628e-01],
        [1.16940654e-01, 2.42212154e-01, 4.84075563e-01, 1.56771628e-01],
        [1.16940654e-01, 2.42212154e-01, 4.84075563e-01, 1.56771628e-01],
        [1.97357771e-02, 2.95457247e-07, 1.65293444e-03, 9.78610993e-01]]),
 'Pi_hat': array([0.0344891, 0.0344891, 0.0344891, 0.8965327])}

	## AFTER N°20 ITERATION
{'A_hat': array([[4.28557566e-01, 2.85705044e-01, 2.85705044e-01, 3.23450574e-05],
        [2.85705044e-01, 4.28557566e-01, 2.85705044e-01, 3.23450574e-05],
        [2.85705044e-01, 2.85705044e-01, 4.28557566e-01, 3.23450574e-05],
        [1.96143260e-01, 1.96143260e-01, 1.96143260e-01, 4.11570220e-01]]),
 'B_hat': array([[1.17609980e-01, 2.35219960e-01, 4.70439903e-01, 1.76730157e-01],
        [1.17609980e-01, 2.35219960e-01, 4.70439903e-01, 1.76730157e-01],
        [1.17609980e-01, 2.35219960e-01, 4.70439903e-01, 1.76730157e-01],
        [2.30808980e-18, 1.24981919e-30, 9.40632446e-08, 9.99999906e-01]]),
 'Pi_hat': array([0.03972496, 0.03972496, 0.03972496, 0.88082513])}

	## AFTER N°30 ITERATION
{'A_hat': array([[4.28571416e-01, 2.85714277e-01, 2.85714277e-01, 2.94708024e-08],
        [2.85714277e-01, 4.28571416e-01, 2.85714277e-01, 2.94708024e-08],
        [2.85714277e-01, 2.85714277e-01, 4.28571416e-01, 2.94708024e-08],
        [1.96128484e-01, 1.96128484e-01, 1.96128484e-01, 4.11614549e-01]]),
 'B_hat': array([[1.17604174e-01, 2.35208347e-01, 4.70416694e-01, 1.76770785e-01],
        [1.17604174e-01, 2.35208347e-01, 4.70416694e-01, 1.76770785e-01],
        [1.17604174e-01, 2.35208347e-01, 4.70416694e-01, 1.76770785e-01],
        [3.51940913e-64, 5.68975430e-84, 3.45654798e-12, 1.00000000e+00]]),
 'Pi_hat': array([0.0397486, 0.0397486, 0.0397486, 0.8807542])}

	## AFTER N°40 ITERATION
{'A_hat': array([[4.28571429e-01, 2.85714286e-01, 2.85714286e-01, 2.68381730e-11],
        [2.85714286e-01, 4.28571429e-01, 2.85714286e-01, 2.68381730e-11],
        [2.85714286e-01, 2.85714286e-01, 4.28571429e-01, 2.68381730e-11],
        [1.96128470e-01, 1.96128470e-01, 1.96128470e-01, 4.11614589e-01]]),
 'B_hat': array([[1.17604168e-001, 2.35208336e-001, 4.70416673e-001, 1.76770822e-001],
        [1.17604168e-001, 2.35208336e-001, 4.70416673e-001, 1.76770822e-001],
        [1.17604168e-001, 2.35208336e-001, 4.70416673e-001, 1.76770822e-001],
        [2.10800891e-140, 1.01539651e-167, 1.26949480e-016, 1.00000000e+000]]),
 'Pi_hat': array([0.03974862, 0.03974862, 0.03974862, 0.88075414])}

	## AFTER N°50 ITERATION
{'A_hat': array([[4.28571429e-01, 2.85714286e-01, 2.85714286e-01, 2.44407052e-14],
        [2.85714286e-01, 4.28571429e-01, 2.85714286e-01, 2.44407052e-14],
        [2.85714286e-01, 2.85714286e-01, 4.28571429e-01, 2.44407052e-14],
        [1.96128470e-01, 1.96128470e-01, 1.96128470e-01, 4.11614589e-01]]),
 'B_hat': array([[1.17604168e-001, 2.35208336e-001, 4.70416673e-001, 1.76770822e-001],
        [1.17604168e-001, 2.35208336e-001, 4.70416673e-001, 1.76770822e-001],
        [1.17604168e-001, 2.35208336e-001, 4.70416673e-001, 1.76770822e-001],
        [4.95317293e-247, 7.10810598e-282, 4.66250217e-021, 1.00000000e+000]]),
 'Pi_hat': array([0.03974862, 0.03974862, 0.03974862, 0.88075414])}

	## AFTER N°100 ITERATION
{'A_hat': array([[4.28571429e-01, 2.85714286e-01, 2.85714286e-01, 1.53079717e-29],
        [2.85714286e-01, 4.28571429e-01, 2.85714286e-01, 1.53079717e-29],
        [2.85714286e-01, 2.85714286e-01, 4.28571429e-01, 1.53079717e-29],
        [1.96128471e-01, 1.96128470e-01, 1.96128470e-01, 4.11614589e-01]]),
 'B_hat': array([[1.17604168e-01, 2.35208336e-01, 4.70416673e-01, 1.76770822e-01],
        [1.17604168e-01, 2.35208336e-01, 4.70416673e-01, 1.76770822e-01],
        [1.17604168e-01, 2.35208336e-01, 4.70416673e-01, 1.76770822e-01],
        [0.00000000e+00, 0.00000000e+00, 3.11572880e-43, 1.00000000e+00]]),
 'Pi_hat': array([0.03974862, 0.03974862, 0.03974862, 0.88075414])}

	## AFTER N°200 ITERATION
{'A_hat': array([[4.27334055e-01, 2.86517196e-01, 2.86148749e-01, 5.95856364e-60],
        [2.84673439e-01, 4.29413546e-01, 2.85913015e-01, 6.03361425e-60],
        [2.84721702e-01, 2.86329706e-01, 4.28948592e-01, 6.01679178e-60],
        [2.00302437e-01, 1.93253276e-01, 1.94829513e-01, 4.11614774e-01]]),
 'B_hat': array([[1.15915735e-01, 2.34221530e-01, 4.72427550e-01, 1.77435185e-01],
        [1.18772506e-01, 2.35887266e-01, 4.69027504e-01, 1.76312723e-01],
        [1.18123411e-01, 2.35516190e-01, 4.69797715e-01, 1.76562684e-01],
        [0.00000000e+00, 0.00000000e+00, 1.39106664e-87, 1.00000000e+00]]),
 'Pi_hat': array([0.03989373, 0.03964619, 0.03970148, 0.8807586 ])}

	## AFTER N°300 ITERATION
{'A_hat': array([[4.08446423e-041, 1.00000000e+000, 0.00000000e+000, 5.14654915e-140],
        [0.00000000e+000, 0.00000000e+000, 1.00000000e+000, 0.00000000e+000],
        [1.00000000e+000, 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
        [5.00000000e-001, 0.00000000e+000, 0.00000000e+000, 5.00000000e-001]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([7.50728162e-81, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00])}

	## AFTER N°400 ITERATION
{'A_hat': array([[1.94932261e-106, 1.00000000e+000, 0.00000000e+000, 1.93760471e-235],
        [0.00000000e+000, 0.00000000e+000, 1.00000000e+000, 0.00000000e+000],
        [1.00000000e+000, 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
        [5.00000000e-001, 0.00000000e+000, 0.00000000e+000, 5.00000000e-001]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([1.70993638e-211, 0.00000000e+000, 0.00000000e+000, 1.00000000e+000])}

	## AFTER N°500 ITERATION
{'A_hat': array([[9.30319966e-172, 1.00000000e+000, 0.00000000e+000, 0.00000000e+000],
        [0.00000000e+000, 0.00000000e+000, 1.00000000e+000, 0.00000000e+000],
        [1.00000000e+000, 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
        [5.00000000e-001, 0.00000000e+000, 0.00000000e+000, 5.00000000e-001]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([0., 0., 0., 1.])}

	## AFTER N°1000 ITERATION
{'A_hat': array([[0. , 1. , 0. , 0. ],
        [0. , 0. , 1. , 0. ],
        [1. , 0. , 0. , 0. ],
        [0.5, 0. , 0. , 0.5]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([0., 0., 0., 1.])}

	## AFTER N°2000 ITERATION
{'A_hat': array([[0. , 1. , 0. , 0. ],
        [0. , 0. , 1. , 0. ],
        [1. , 0. , 0. , 0. ],
        [0.5, 0. , 0. , 0.5]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([0., 0., 0., 1.])}

	## AFTER N°3000 ITERATION
{'A_hat': array([[0. , 1. , 0. , 0. ],
        [0. , 0. , 1. , 0. ],
        [1. , 0. , 0. , 0. ],
        [0.5, 0. , 0. , 0.5]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([0., 0., 0., 1.])}

	## AFTER N°5000 ITERATION
{'A_hat': array([[0. , 1. , 0. , 0. ],
        [0. , 0. , 1. , 0. ],
        [1. , 0. , 0. , 0. ],
        [0.5, 0. , 0. , 0.5]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([0., 0., 0., 1.])}

	## AFTER N°10000 ITERATION
{'A_hat': array([[0. , 1. , 0. , 0. ],
        [0. , 0. , 1. , 0. ],
        [1. , 0. , 0. , 0. ],
        [0.5, 0. , 0. , 0.5]]),
 'B_hat': array([[0.        , 0.        , 0.66666667, 0.33333333],
        [0.33333333, 0.66666667, 0.        , 0.        ],
        [0.        , 0.        , 1.        , 0.        ],
        [0.        , 0.        , 0.        , 1.        ]]),
 'Pi_hat': array([0., 0., 0., 1.])}
